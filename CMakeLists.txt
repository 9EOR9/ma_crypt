PROJECT(ma_crypt)
cmake_minimum_required(VERSION 3.5)

IF(NOT WITH_CRYPTO)
  IF(WIN32)
    SET(WITH_CRYPTO "schannel")
  ELSE()
    SET(WITH_CRYPTO "openssl")
  ENDIF()
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wunused -Wno-uninitialized  -Wall -Wextra -Wformat-security -Wno-init-self -Wvla -Wwrite-strings -Wdeclaration-after-statement")
ENDIF()

SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 1)
SET(VERSION_PATCH 0)

ADD_SUBDIRECTORY(doc)

IF(WITH_CRYPTO)
  STRING(TOLOWER ${WITH_CRYPTO} WITH_CRYPTO)
  IF(WITH_CRYPTO STREQUAL "openssl")
    FIND_PACKAGE(OpenSSL)
    IF(OPENSSL_FOUND)
      ADD_DEFINITIONS(-DHAVE_OPENSSL)
      SET(CRYPTO_LIBRARIES ${OPENSSL_LIBRARIES} ${OPENSSL_CRYPTO_LIBRARIES})
      MESSAGE(STATUS "LIBS: ${CRYPTO_LIBRARIES}")
      INCLUDE_DIRECTORIES(BEFORE ${OPENSSL_INCLUDE_DIR})
      MESSAGE(STATUS "OpenSSL version: ${OPENSSL_VERSION}")
    ENDIF()
  ELSEIF(WITH_CRYPTO STREQUAL "nettle")
    INCLUDE(${PROJECT_SOURCE_DIR}/cmake/findnettle.cmake)
    IF(NETTLE_FOUND)
      ADD_DEFINITIONS(-DHAVE_NETTLE)
      INCLUDE_DIRECTORIES(BEFORE ${NETLLE_INCLUDE_DIRS})
      SET(CRYPTO_LIBRARIES ${NETTLE_LIBRARIES} -lnettle)
    ELSE()
      MESSAGE(FATAL "GnuTLS not found")
    ENDIF()
  ELSEIF(WITH_CRYPTO STREQUAL "schannel")
    ADD_DEFINITIONS(-DHAVE_SCHANNEL)
	SET(CRYPTO_LIBRARIES bcrypt)
  ENDIF()
ENDIF()

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)

ADD_LIBRARY(ma_crypt STATIC ${PROJECT_SOURCE_DIR}/src/ma_hash.c ${PROJECT_SOURCE_DIR}/src/ma_crypt.c)
TARGET_LINK_LIBRARIES(ma_crypt PUBLIC ${CRYPTO_LIBRARIES})

ADD_SUBDIRECTORY(test)
